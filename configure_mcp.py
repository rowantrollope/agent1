#!/usr/bin/env python3
"""
Configure MCP Server for Agent1

This script automatically configures the MCP server path for Agent1.
"""

import os
import sys
from pathlib import Path

def main():
    print("üîß Configuring MCP Server for Agent1...")

    # Get the project root directory
    project_root = Path(__file__).parent.absolute()

    # Path to the embedded MCP server in the agent directory
    mcp_server_path = project_root / "agent" / "simple_mcp_server.py"

    # Path to .env.local file
    env_file = project_root / ".env.local"

    print(f"üìÅ Project root: {project_root}")
    print(f"üêç MCP Server path: {mcp_server_path}")

    # Check if MCP server exists
    if not mcp_server_path.exists():
        print(f"‚ùå MCP server not found at: {mcp_server_path}")
        print("   Please make sure the MCP server file exists.")
        return False

    # Make sure the MCP server is executable
    os.chmod(mcp_server_path, 0o755)
    print("‚úÖ MCP server file is executable")

    # Read existing .env.local content
    env_content = {}
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_content[key.strip()] = value.strip()

    # Update the MCP server path
    env_content['REMEM_SERVER_PATH'] = str(mcp_server_path)

    # Add other required environment variables if not present
    defaults = {
        'REDIS_HOST': 'localhost',
        'REDIS_PORT': '6379',
        'REDIS_DB': '0',
        'MEMORY_DEBUG': 'false',
        'MEMORY_VERBOSE': 'false'
    }

    for key, default_value in defaults.items():
        if key not in env_content:
            env_content[key] = default_value

    # Write back to .env.local
    with open(env_file, 'w') as f:
        f.write("# Agent1 Environment Configuration\n")
        f.write("# Generated by configure_mcp.py\n\n")

        # Write OPENAI_API_KEY first if it exists
        if 'OPENAI_API_KEY' in env_content:
            f.write(f"OPENAI_API_KEY={env_content['OPENAI_API_KEY']}\n\n")

        # Write MCP configuration
        f.write("# MCP Server Configuration\n")
        f.write(f"REMEM_SERVER_PATH={env_content['REMEM_SERVER_PATH']}\n\n")

        # Write Redis configuration
        f.write("# Redis Configuration (for MCP servers that need it)\n")
        for key in ['REDIS_HOST', 'REDIS_PORT', 'REDIS_DB']:
            if key in env_content:
                f.write(f"{key}={env_content[key]}\n")
        f.write("\n")

        # Write debug settings
        f.write("# Debug Settings\n")
        for key in ['MEMORY_DEBUG', 'MEMORY_VERBOSE']:
            if key in env_content:
                f.write(f"{key}={env_content[key]}\n")

        # Write any other variables
        written_keys = {'OPENAI_API_KEY', 'REMEM_SERVER_PATH', 'REDIS_HOST', 'REDIS_PORT', 'REDIS_DB', 'MEMORY_DEBUG', 'MEMORY_VERBOSE'}
        other_vars = {k: v for k, v in env_content.items() if k not in written_keys}
        if other_vars:
            f.write("\n# Other Configuration\n")
            for key, value in other_vars.items():
                f.write(f"{key}={value}\n")

    print(f"‚úÖ Configuration saved to: {env_file}")

    # Test the MCP server
    print("\nüß™ Testing MCP server...")
    try:
        import subprocess
        import sys

        agent_dir = project_root / "agent"
        venv_python = agent_dir / "venv" / "bin" / "python"

        if venv_python.exists():
            python_cmd = str(venv_python)
        else:
            python_cmd = sys.executable

        # Test that the server can start (just check imports)
        result = subprocess.run([
            python_cmd, '-c',
            f'import simple_mcp_server; print("MCP server imports successfully")'
        ], capture_output=True, text=True, timeout=10, cwd=str(agent_dir))

        if result.returncode == 0:
            print("‚úÖ MCP server test passed")
        else:
            print(f"‚ö†Ô∏è  MCP server test failed: {result.stderr}")

    except Exception as e:
        print(f"‚ö†Ô∏è  Could not test MCP server: {e}")

    print("\nüéâ MCP Configuration Complete!")
    print("\nNext steps:")
    print("1. Make sure your OPENAI_API_KEY is set in .env.local")
    print("2. Start the Python backend: npm run python:start")
    print("3. Start the frontend: npm run dev")
    print("4. Test MCP tools in the chat interface")
    print("\nYou can check MCP status at: http://localhost:8000/mcp/status")

    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
